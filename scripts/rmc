#!/bin/bash

# Spock's implementation of the ROSE Meta Config (RMC).

# Additional documentation, tutorial, and examples are at
# [https://rosecompiler.atlassian.net/wiki/display/~matzke/ROSE+Meta+Config+version+2]. If that link doesn't work, gocd
# to the ROSE Confluence application and search for "ROSE Meta Config version 2".

arg0="${0##*/}"
dir0="${0%/*}"

# Make sure all shell variables are set that this script might want to use
if [ -n "$SPOCK_BINDIR" ]; then
    eval $("$SPOCK_BINDIR/spock-ls" --shellvars --export) || exit 1
else
    eval $(spock-ls --shellvars --export) || exit 1
fi

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1
source "$SPOCK_SCRIPTS/impl/spock-realpath.sh" || exit 1

usage() {
    cat <<EOF >&2
usage: $arg0 [SWITCHES] [COMMAND...]
    Switches:
        --cwd=DIR, -C DIR
            Change working directory to DIR before doing anything.

        --blddir=DIR
            Use the specified directory as the root of the ROSE build
            tree without changing to that directory.

        --debug
            Prints lots of debugging information.

        --help, -h
            Show this help message.

        --install=yes|no|ask
            Install missing packages without prompting (yes), or
            after interactive prompting (ask), or not at all (no).
            The default is "ask" if no command is specified, and
            "no" if a command is specified. "--install" is the same
            as saying "--install=ask".

    Commands:
        Commands are run by first changing to the directory specified
        with the --cwd or -C switch. Then the ROSE environment is
        configured if it hasn't been already, then the command is
        run.  If RMC doesn't recognize the command as its own, then it
        tries to run it as a shell command.

        (none)
            Start an interactive subshell with the environment set
            up for building ROSE.

        init SOURCE_DIR
            Initialize the current working directory, which must
            be empty, as a new ROSE build tree. This creates a file
            named .rmc-main.cfg which holds configuration information.

        config [--dry-run]
            Run (or just show) ROSE's configure script with switches
            appropriate for the current environment. The current
            working directory (or the --cwd/-C switch) is used as
            the starting point to find the top of the ROSE build
            tree.

        srcdir
            Look for the source directory that corresponds to the
            current build directory.

        (other)
            Any other commands are assumed to be shell commands and
            are run in a subshell. You can easily extend RMC by
            providing shell scripts.
EOF
    exit 0
}

# Parse command-line switches
command= do_install= do_graph= do_debug=
while [ "$#" -gt 0 ]; do
    case "$1" in
        --) shift; break ;;

        --help|-h)
            usage
            exit 0
            ;;

        --cwd=*)
            cd "${1#--cwd=}" || exit 1
            shift
            ;;
        -C)
            cd "$2" || exit 1
            shift 2
            ;;

        --blddir=*)
            RG_BLD="${1#--blddir=}"
            shift
            ;;

        --debug)
            do_debug=all
            shift
            ;;

        --graph=*)
            do_graph="$1"
            shift
            ;;
        --graph)
            do_graph="$1=$2"
            shift 2
            ;;

        --install=yes|--install=no|--install=ask)
            do_install="$1"
            shift
            ;;
        --install)
            if [ "$2" = "yes" -o "$2" = "no" -o "$2" = "ask" ]; then
                do_install="--install=$2"
                shift 2
            else
                do_install="--install=ask"
                shift
            fi
            ;;

        --version|-V)
            "$SPOCK_BINDIR/spock-ls" --version
            exit 0
            ;;

        -*)
            die "unrecognized command-line switch: $1"
            ;;

        *)
            command="$1"
            shift
            break ;;
    esac
done

if [ "$command" = "" ]; then
    : ${do_install:=--install=yes}
    : ${do_debug:=">=march"}
else
    : ${do_install:=--install=no}
    : ${do_debug:=">=warn"}
fi

########################################################################################################################
#                     _   _ _   _ _ _ _           _____                 _   _
#                    | | | | |_(_) (_) |_ _   _  |  ___|   _ _ __   ___| |_(_) ___  _ __  ___
#                    | | | | __| | | | __| | | | | |_ | | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#                    | |_| | |_| | | | |_| |_| | |  _|| |_| | | | | (__| |_| | (_) | | | \__ \
#                     \___/ \__|_|_|_|\__|\__, | |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#                                         |___/
#
########################################################################################################################

# Validates that there is only one argument for a function.
check_one_arg() {
    local function="$1"; shift
    [ "$#" -eq 1 ] || die "$function expects one argument"
}

# Checks that the argument is one of the specified values
check_arg_in() {
    local function="$1" arg="$2"; shift 2
    local possible
    for possible in "$@"; do
        [ "$arg" = "$possible" ] && return 0
    done
    die "$function argument must be in the set {" "$@" "}"
}

# Get the Spock name for an RMC package
package_spec() {
    local function="$1" pkgvers="$2"

    local pkgname= pkgspec=
    case "$function" in
        # The compiler spec is weird: the $pkgvers includes the compiler vendor and language in addition to the version.
        rmc_compiler) pkgspec="$pkgvers"; pkgvers= ;;

        rmc_dwarf) pkgname="libdwarf" ;;
        rmc_elf) pkgname="libelf" ;;
        rmc_gcrypt) pkgname="libgcrypt" ;;
        rmc_magic) pkgname="libmagic" ;;
        rmc_pqxx) pkgname="libpqxx" ;;
        rmc_yaml) pkgname="yamlcpp" ;;

	# For boost, if python is enabled use the normal boost package, otherwise use boost-nopy. Compiling Python
	# with Intel compilers on RHEL is problematic.
	rmc_boost)
	    if [ "$RMC_PYTHON" = none -o "$RMC_PYTHON" = no -o "$RMC_PYTHON" = system ]; then
		pkgname="boost-nopy"
	    else
		pkgname="boost-py"
	    fi
	    ;;

        # rmc_java is a bit weird because a vendor such as "oracle-java-" can precede the version number. If the
        # vendor is present, then it becomes the Spock package spec, otherwise we assume it should be "orical-java-".
        rmc_java)
            case "$pkgvers" in
                no|none|system|ambivalent)
                    pkgname="oracle-java"
                    ;;
                *)
                    pkgspec="$pkgvers"
                    pkgvers=
                    ;;
            esac
            ;;

        rmc_codegen)
            pkgspec="${RMC_CODEGEN}-generation"
            ;;

        rmc_cuda)
            # This is a special case because we want the user to be able to specify a specific specification
            # in addition to just a version number.
            case "$pkgvers" in
                no|none|ambivalent)
                    pkgspec=
                    ;;
                system)
                    pkgspec="cuda-compiler"
                    ;;
                [0-9]*)
                    pkgspec="nvidia-cuda-$pkgvers"
                    ;;
                *)
                    pkgspec="$pkgvers"
                    ;;
            esac
            ;;

        rmc_raja)
            # If RAJA is desired, it should be either "raja-nocuda" or "raja-cuda" depending on whether CUDA
            # support is also desired.
            case "$pkgvers" in
                no|none|ambivalent|system)
                    pkgspec=
                    ;;
                *)
                    case "$RMC_CUDA" in
                        no|none|ambivalent)
                            pkgspec="raja-nocuda-$pkgvers"
                            ;;
                        *)
                            pkgspec="raja-cuda-$pkgvers"
                            ;;
                    esac
                    ;;
            esac
            ;;

        rmc_tup)
            if [ "$RMC_BUILD" = "tup" -a "$pkgvers" = "ambivalent" ]; then
                pkgspec="tup>0" # latest version
	    else
		case "$pkgvers" in
		    no|none|ambivalent)
			pkgspec=
			;;
		    *)
			pkgspec="tup-$pkgvers"
		esac
            fi
            ;;

        rmc_*) pkgname="${function#rmc_}" ;;
        *) die "check_package fails for $function $1" ;;
    esac

    if [ "$pkgspec" = "" ]; then
        case "$pkgvers" in
            system) : nothing ;;
            no|none|ambivalent) pkgspec= ;;
	    =*) pkgspec="$pkgname$pkgvers" ;;
            *) pkgspec="$pkgname-$pkgvers" ;;
        esac
    fi

    echo "$pkgspec"
}

# Find the top of the ROSE build tree by looking for .rmc-main.cfg
find_build_tree() {
    if [ -n "$RG_BLD" -a -e "$RG_BLD/.rmc-main.cfg" ]; then
        echo "$RG_BLD"
        return 0
    else
        local dir=$(pwd)
        while [ "$dir" != "" ]; do
            if [ -e "$dir/.rmc-main.cfg" ]; then
                echo "$dir"
                return 0
            fi
            dir="${dir%/*}"
        done
    fi
    die "cannot find top of ROSE build tree"
}

read_config_file() {
    local config_file="$1"

    # Variables that might be used in the configure script
    export RG_BLD=$(spock-realpath "$config_file"); RG_BLD="${RG_BLD%/*}"
    export ROSE_BUILD="$RG_BLD"

    # Set defaults
    export RMC_ROSESRC=
    export RMC_BUILD=autoconf
    export RMC_PARALLELISM=system
    export RMC_LANGUAGES=ambivalent
    export RMC_DEBUG=ambivalent
    export RMC_OPTIMIZE=ambivalent
    export RMC_WARNINGS=ambivalent
    export RMC_ASSERTION_BEHAVIOR=ambivalent
    export RMC_OPTIONAL_ASSERTIONS=enabled
    export RMC_CODEGEN=default

    export RMC_BINWALK=none
    export RMC_BISON=3
    export RMC_BOOST=
    export RMC_CAPSTONE=ambivalent
    export RMC_CMAKE=3
    export RMC_CUDA=none
    export RMC_DLIB=none
    export RMC_DOXYGEN=none
    export RMC_DWARF=none
    export RMC_EDG=ambivalent
    export RMC_EDG_COMPILE=ambivalent
    export RMC_ELF=none
    export RMC_GCRYPT=none
    export RMC_JAVA=none
    export RMC_JQ=none
    export RMC_LCOV=none
    export RMC_LIBTOOL=none
    export RMC_MAGIC=none
    export RMC_PQXX=none
    export RMC_PYTHON=none
    export RMC_QT=none
    export RMC_RAJA=none
    export RMC_READLINE=none
    export RMC_SPOT=none
    export RMC_SQLITE=none
    export RMC_TUP=ambivalent
    export RMC_WT=none
    export RMC_YAML=none
    export RMC_YICES=none
    export RMC_Z3=none
    export RMC_OTHER=
    export RMC_INSTALLED=yes

    # Read config file to override the defaults
    source "$config_file" || exit 1
    RMC_HASH=$(sha1sum <"$config_file" |cut -d' ' -f1)

    # Make sure some basic things are set. If they're set, then they've already been validated.
    [ ! -d "$RMC_ROSESRC" -o ! -e "$RMC_ROSESRC/config/support-rose.m4" ] &&
        die "$config_file: missing or incorrect rmc_rosesrc (use \"rmc_rosesrc /path/to/ROSE/source/tree\")"
    [ "$RMC_COMPILER" = "" ] &&
        die "$config_file: missing rmc_compiler specification (try \"rmc_compiler gnu-4-default\")"
    [ -n "$RMC_BOOST" ] ||
        die "$config_file: missing rmc_boost specification (try \"rmc_boost 1.62\")"

    # Export important variables not exported by rmc_* commands
    export RG_SRC="$RMC_ROSESRC"
    export ROSE_SOURCE="$RMC_ROSESRC"
    rmc_parallelism $RMC_PARALLELISM # make sure its a number

    export RMC_OS_NAME="$($SPOCK_SCRIPTS/spock-os-name --long)"
    export RMC_OS_NAME_SHORT="$($SPOCK_SCRIPTS/spock-os-name --short)"
    export RMC_OS_NAME_FILE="$($SPOCK_SCRIPTS/spock-os-name --file)"

    # Shell prompt adjustments
    export PS1_STACK="$PS1_STACK RMC:${RG_BLD##*/}"

    # Library search paths. We try not to use LD_LIBRARY_PATH because it's broken by design, but if the user already has
    # LD_LIBRARY_PATH set to something, we need to keep it. Additionally, any LD_LIBRARY_PATH should be added to
    # LD_RUN_PATH so that those directories get added to the rpaths of any shared libraries and executables we're about
    # to install.
    if [ -n "$LD_LIBRARY_PATH" ]; then
	if [ -n "$LD_RUN_PATH" ]; then
	    LD_RUN_PATH="$LD_RUN_PATH:$LD_LIBRARY_PATH"
	else
	    LD_RUN_PATH="$LD_LIBRARY_PATH"
	fi
    fi
}

# Returns true if $1 is a valid RMC compiler spec of the form, VENDOR-VERSION[-LANG].
is_rmc_compiler_spec() {
    local spec="$1"

    local cxx_vendor=$(echo "$spec" |cut -d- -f1)
    local cxx_version=$(echo "$spec" |cut -d- -f2 -s)
    local cxx_lang=$(echo "$spec" |cut -d- -f3 -s)

    case "$cxx_vendor" in
        gcc|llvm|intel)
            :
            ;;
        *)
            return 1
            ;;
    esac

    case "$cxx_lang" in
        ""|default|c++03|c++11|c++14|c++17|gnu++03|gnu++11|gnu++14|gnu++17)
            :
            ;;
        *)
            return 1
            ;;
    esac

    return 0
}

# Split an RMC or Spock compiler spec into vendor, language, and version and return a colon-separated list in that
# order.  The version number will be a Spock version specification that starts with a version comparison operator. The
# vendor and language will always be non-empty, but the version could be empty.
parse_cxx_spec() {
    local rmc_or_spock_spec="$1"

    if is_rmc_compiler_spec "$rmc_or_spock_spec"; then
        # RMC compiler names were like VENDOR-VERS-LANG with "-LANG" defaulting to "default".
        local cxx_vendor=$(echo "$rmc_or_spock_spec" |cut -d- -f1)
        local cxx_version=$(echo "$rmc_or_spock_spec" |cut -d- -f2 -s)
        local cxx_language=$(echo "$rmc_or_spock_spec" |cut -d- -f3 -s)
        [ "$cxx_vendor" = "" -o "$cxx_version" = "" ] && die "rmc_compiler $rmc_or_spock_spec is not proper format"
        [ "$cxx_language" = "" ] && cxx_language=default

        # Spock vendor names are different
        [ "$cxx_vendor" = "gcc" ] && cxx_vendor="gnu"

        # Spock includes the LANG as part of the package name, like gnu-c++11. RMC's "default" meant no language was
        # specified and therefore the actual language varies by compiler vendor and version.  Spock installs such compilers
        # with an alias. For instance, the "gnu-c++-4.8" is an alias for "gnu-gnu++03-4.8" since the default
        # language for GCC-4.8.4's g++ command is gnu++03.
        [ "$cxx_language" = "default" ] && cxx_language=default-c++

        # Spock specs need a version operator
        [ -n "$cxx_version" ] && cxx_version="-$cxx_version"

    else
        # Spock specs are VENDOR-LANG-VERS for specific compilers where "-VERS" is optional and its leading "-" can be
        # any Spock version comparison operator.
        case "$rmc_or_spock_spec" in
            gnu*)
                local cxx_vendor=gnu
                local langvers="${rmc_or_spock_spec#gnu}"
                ;;
            llvm*)
                local cxx_vendor=llvm
                local langvers="${rmc_or_spock_spec#llvm}"
                ;;
            intel*)
                local cxx_vendor=intel
                local langvers="${rmc_or_spock_spec#intel}"
                ;;
            *)
                die "malformed compiler spec: unknown vendor field in \"$rmc_or_spock_spec\""
                ;;
        esac

        case "$langvers" in
	    -gnu++98*)
		local cxx_language=gnu++98
		local cxx_version="${langvers#-gnu++98}"
		;;
            -gnu++03*)
                local cxx_language=gnu++03
                local cxx_version="${langvers#-gnu++03}"
                ;;
            -gnu++11*)
                local cxx_language=gnu++11
                local cxx_version="${langvers#-gnu++11}"
                ;;
            -gnu++14*)
                local cxx_language=gnu++14
                local cxx_version="${langvers#-gnu++14}"
                ;;
            -gnu++17*)
                local cxx_language=gnu++17
                local cxx_version="${langvers#-gnu++17}"
                ;;
	    -c++98*)
		local cxx_language=c++98
		local cxx_version="${langvers#-c++98}"
		;;
            -c++03*)
                local cxx_language=c++03
                local cxx_version="${langvers#-c++03}"
                ;;
            -c++11*)
                local cxx_language=c++11
                local cxx_version="${langvers#-c++11}"
                ;;
            -c++14*)
                local cxx_language=c++14
                local cxx_version="${langvers#-c++14}"
                ;;
            -c++17*)
                local cxx_language=c++17
                local cxx_version="${langvers#-c++17}";
                ;;
            -default)
                local cxx_language="default-c++"
                local cxx_version="${langvers#-default}"
                ;;
            *)
                local cxx_language="default-c++"
                local cxx_version="$langvers"
                ;;
        esac
    fi

    echo "$cxx_vendor:$cxx_language:$cxx_version"
}

# Runs the rose-install-all-deps. Needed because Spock's --install is not fully implemented yet. Once it's implemented
# we can remove this function and its call.
preinstall() {
    # RMC_CXX_COMPILER is the Spock specification for the compiler, such as gnu-default-c++-5.4, or gnu-c++11-5.4. The
    # language is optional, so gnu-5.4 is the same as gnu-default-5.4.  On the other hand, the user could have given us
    # a Spock spec instead of an RMC spec.
    local spec=$(parse_cxx_spec "$RMC_COMPILER")
    local cxx_vendor=$(echo "$spec" |cut -d: -f1)
    local cxx_lang=$(echo "$spec" |cut -d: -f2 -s)
    local cxx_version=$(echo "$spec" |cut -d: -f3 -s)
    local cxx_codegen=$(package_spec rmc_codegen "$RMC_CODEGEN")

    env \
        COMPILER_COLLECTIONS="$cxx_vendor$cxx_version" \
        CXX_LANGUAGES="$cxx_lang" \
        CMAKE_VERSIONS="$RMC_CMAKE" \
        BOOST_VERSIONS="$RMC_BOOST" \
        DLIB_VERSIONS=$(echo "$RMC_DLIB" |sed 's/system/installed/') \
        JAVA_VERSIONS=$(echo "$RMC_JAVA" |sed 's/system/installed/') \
	JQ_VERSIONS=$(echo "$RMC_JQ" |sed 's/system/installed/') \
        PYTHON_VERSIONS=$(echo "$RMC_PYTHON" |sed 's/system/installed/') \
        SPOT_VERSIONS=$(echo "$RMC_SPOT" |sed 's/system/installed/') \
        YICES_VERSIONS=$(echo "$RMC_YICES" |sed 's/system/installed/') \
        LCOV_VERSIONS=$(echo "$RMC_LCOV" |sed 's/system/installed/') \
        LIBTOOL_VERSIONS=$(echo "$RMC_LIBTOOL" |sed 's/system/installed/') \
        YAMLCPP_VERSIONS=$(echo "$RMC_YAML" |sed 's/system/installed/') \
        IGNORE_FAILURES=no \
        $SPOCK_BINDIR/spock-shell --with "$cxx_codegen" \
        $SPOCK_SCRIPTS/rose-install-all-deps
}

# Adjust environment for ROSE itself now that it's already been adjusted for the ROSE prerequisites and all those
# prerequisites have been installed.
adjust_rose_variables() {
    case "$RMC_INSTALLED" in
	yes|ambivalent|"")
	    case "$RMC_BUILD" in
		autoconf|cmake)
		    export ROSE_INSTALLED="$RG_BLD/installed"
		    ;;
		*)
		    export ROSE_INSTALLED="$HOME/rose-installed"
		    ;;
	    esac
	    ;;
	no)
	    export ROSE_INSTALLED=
	    ;;
	*)
	    export ROSE_INSTALLED="$RMC_INSTALLED"
	    ;;
    esac

    case "$RMC_BUILD" in
	autoconf|cmake)
	    if [ -n "$ROSE_INSTALLED" ]; then
		if [ -n "$LD_RUN_PATH" ]; then
		    export LD_RUN_PATH="$LD_RUN_PATH:$ROSE_INSTALLED/lib"
		else
		    export LD_RUN_PATH="$ROSE_INSTALLED/lib"
		fi
	    else
		export ROSE_INSTALLED="/NO_ROSE_INSTALLATION_PREFIX"
	    fi
	    ;;
	*)
	    : no adjustment needed
	    ;;
    esac
}

########################################################################################################################
#                        ____             __ _                       _   _
#                       / ___|___  _ __  / _(_) __ _ _   _ _ __ __ _| |_(_) ___  _ __
#                      | |   / _ \| '_ \| |_| |/ _  | | | | '__/ _  | __| |/ _ \| '_ \
#                      | |__| (_) | | | |  _| | (_| | |_| | | | (_| | |_| | (_) | | | |
#                       \____\___/|_| |_|_| |_|\__, |\__,_|_|  \__,_|\__|_|\___/|_| |_|
#                                              |___/
#
#
# These rmc_* commands that appear in config files. They mostly just set variables of the same name after validating the
# input.  The ROSE Confluence documentation describes each of these, including their defaults (IF YOU CHANGE HOW THESE
# WORK, PLEASE UPDATE THE CONFLUENCE PAGE!)
########################################################################################################################

rmc_rosesrc() {
    check_one_arg rmc_rosesrc "$@"
    RMC_ROSESRC=$(spock-realpath "$1")
    [ "$RMC_ROSESRC" = "" ] && die "ROSE source tree is required"
    [ -d "$RMC_ROSESRC" ] || die "ROSE source tree is missing: $RMC_ROSESRC"
    [ -e "$RMC_ROSESRC/src/frontend/BinaryFormats/ElfSection.C" ] || \
        die "does not look like a ROSE source tree: $RMC_ROSESRC"
}

rmc_toolchain() {
    check_one_arg rmc_toolchain "$@"
    : ignored
}

rmc_build() {
    check_one_arg rmc_build "$@"
    check_arg_in rmc_build "$1" cmake autoconf tup
    RMC_BUILD="$1"
}

rmc_install() {
    # Argument is "yes", "no", "ambivalent", or the name of a (possibly not existing) directory
    check_one_arg rmc_install "$@"
    RMC_INSTALLED="$1"
}

rmc_parallelism() {
    check_one_arg rmc_parallelism "$@"
    local nprocs=
    case "$1" in
        ""|system)
            local nprocs=$(sed -n '/^processor[ \t]*:/p' /proc/cpuinfo |wc -l)
            [ -n "$nprocs" ] || nprocs=1
            ;;
        unlimited|[0-9]|[0-9][0-9]|[0-9][0-9][0-9])
            nprocs="$1"
            ;;
        *)
            die "invalid parallelism: '$1'"
            ;;
    esac
    RMC_PARALLELISM="$nprocs"
}

rmc_languages() {
    check_one_arg rmc_languages "$@"
    RMC_LANGUAGES="$1"
}

rmc_compiler() {
    # The argument is rather compilicated, but in short, rmc_compiler defines three variables:
    #    1. RMC_COMPILER is the argument as given by the user.
    #    2. RMC_CXX_COMPILER is a Spock spec for the C++ compiler
    #    3. RMC_C_COMPILER is the Spock spec for the C compiler

    check_one_arg rmc_compiler "$@"
    RMC_COMPILER="$1"

    local spec=$(parse_cxx_spec "$RMC_COMPILER")
    local cxx_vendor=$(echo "$spec" |cut -d: -f1)
    local cxx_language=$(echo "$spec" |cut -d: -f2 -s)
    local cxx_version=$(echo "$spec" |cut -d: -f3 -s)
    [ "$cxx_vendor" = "" -o "$cxx_language" = "" ] && exit 1 # error already printed

    # The Spock specification for the compiler
    RMC_CXX_COMPILER="$cxx_vendor-$cxx_language$cxx_version"

    # ROSE also needs a C compiler, but it assumes the compiler's default language, whatever that might be.
    RMC_C_COMPILER="$cxx_vendor-default-c$cxx_version"
}

rmc_codegen() {
    check_one_arg rmc_codegen "$@"
    RMC_CODEGEN="$1"
}

rmc_debug() {
    check_one_arg rmc_debug "$@"
    check_arg_in rmc_debug "$1" yes no ambivalent
    RMC_DEBUG="$1"
}

rmc_optimize() {
    check_one_arg rmc_optimize "$@"
    check_arg_in rmc_optimize "$1" yes no ambivalent
    RMC_OPTIMIZE="$1"
}

rmc_warnings() {
    check_one_arg rmc_warnings "$@"
    check_arg_in rmc_warnings "$1" yes no ambivalent
    RMC_WARNINGS="$1"
}

# This is used by portability testing, but users should use rmc_optional_assertions and rmc_assertion_behavior.
rmc_assertions() {
    # One or two arguments, any order. One argument is in the set {abort, throw, exit, ambivalent} and controls how
    # failed assertions behave by default in ROSE (the behavior can be overridden at run time). The other argument is in
    # the set {enabled, disabled} and determines whether optional assertions are compiled into the library.
    #
    # For the sake of the portability testing matrix, this can also take one argument which is the quoted version of
    # both arguments, as in: rmc_assertions 'enabled abort'.
    #
    # For the sake of portability testing tools that can handle only single-word arguments, the arguments can be combined
    # as a single word separated from one another by a hyphen.
    local word;
    for word in $(echo $* |tr - ' '); do
	case "$word" in
	    abort|throw|exit|ambivalent)
		RMC_ASSERTION_BEHAVIOR="$word"
		;;
	    enabled|disabled)
		RMC_OPTIONAL_ASSERTIONS="$word"
		;;
	    *)
		die "rmc_assertions: unrecognized argument: $word"
		;;
	esac
    done
}

rmc_optional_assertions() {
    check_one_arg rmc_optional_assertions "$@"
    check_arg_in rmc_optional_assertions "$1" enabled disabled
    RMC_OPTIONAL_ASSERTIONS="$1"
}

rmc_assertion_behavior() {
    check_one_arg rmc_assertion_behavior "$@"
    check_arg_in rmc_assertion_behavior "$1" abort throw exit ambivalent
    RMC_ASSERTION_BEHAVIOR="$1"
}

rmc_binwalk() {
    check_one_arg rmc_binwalk "$@"
    RMC_BINWALK="$1"
}

rmc_bison() {
    check_one_arg rmc_bison "$@"
    RMC_BISON="$1"
}

rmc_boost() {
    check_one_arg rmc_boost "$@"
    RMC_BOOST="$1"
}

rmc_capstone() {
    check_one_arg rmc_capstone "$@"
    RMC_CAPSTONE="$1"
}

rmc_cmake() {
    check_one_arg rmc_cmake "$@"
    RMC_CMAKE="$1"
}

rmc_cuda() {
    check_one_arg rmc_cuda "$@"
    RMC_CUDA="$1"
}

rmc_dlib() {
    check_one_arg rmc_dlib "$@"
    RMC_DLIB="$1"
}

rmc_doxygen() {
    check_one_arg rmc_doxygen "$@"
    RMC_DOXYGEN="$1"
}

rmc_dwarf() {
    check_one_arg rmc_dwarf "$@"
    RMC_DWARF="$1"
}

rmc_edg() {
    check_one_arg rmc_edg "$@"
    RMC_EDG="$1"
}

rmc_edg_compile() {
    check_one_arg rmc_edg_compile "$@"
    RMC_EDG_COMPILE="$1"
}

rmc_elf() {
    check_one_arg rmc_elf "$@"
    RMC_ELF="$1"
}

rmc_gcrypt() {
    check_one_arg rmc_gcrypt "$@"
    RMC_GCRYPT="$1"
}

rmc_java() {
    check_one_arg rmc_java "$@"
    RMC_JAVA="$1"

    case "$RMC_JAVA" in
        none|system|ambivalent)
            : good
            ;;
        oracle-java-*)
            : good
            ;;
        *)
            RMC_JAVA="oracle-java-$RMC_JAVA"
            ;;
    esac
}

rmc_jq() {
    check_one_arg rmc_jq "$@"
    RMC_JQ="$1"
}

rmc_libtool() {
    check_one_arg rmc_libtool "$@"
    RMC_LIBTOOL="$1"
}

rmc_lcov() {
    check_one_arg rmc_lcov "$@"
    RMC_LCOV="$1"
}

rmc_magic() {
    check_one_arg rmc_magic "$@"
    RMC_MAGIC="$1"
}

rmc_pqxx() {
    check_one_arg rmc_pqxx "$@"
    RMC_PQXX="$1"
}

rmc_python() {
    check_one_arg rmc_python "$@"
    RMC_PYTHON="$1"

    local exe=$(type -p "$RMC_PYTHON" 2>/dev/null)
    if [ -n "$exe" ]; then
        # Python2's --version emits to to standard error instead of standard output. We keep only the major version
        local pyver=$("$exe" --version 2>&1 |sed -n '/^Python / s/^[^0-9]*\([0-9]\+\).*/\1/p')
        [ -n "$pyver" ] && RMC_PYTHON="$pyver"
    fi

    case "$RMC_PYTHON" in
        2|*python2*) RMC_PYTHON=2 ;;
        3|*python3*) RMC_PYTHON=3 ;;
    esac
}

rmc_qt() {
    check_one_arg rmc_qt "$@"
    RMC_QT="$1"
}

rmc_raja() {
    check_one_arg rmc_raja "$@"
    RMC_RAJA="$1"
}

rmc_readline() {
    check_one_arg rmc_readline "$@"
    RMC_READLINE="$1"
}

rmc_spot() {
    check_one_arg rmc_spot "$@"
    RMC_SPOT="$1"
}

rmc_sqlite() {
    check_one_arg rmc_sqlite "$@"
    RMC_SQLITE="$1"
}

rmc_tup() {
    check_one_arg rmc_tup "$@"
    RMC_TUP="$1"
}

rmc_wt() {
    check_one_arg rmc_wt "$@"
    RMC_WT="$1"
}

rmc_yaml() {
    check_one_arg rmc_yaml "$@"
    RMC_YAML="$1"
}

rmc_yices() {
    check_one_arg rmc_yices "$@"
    RMC_YICES="$1"
}

rmc_z3() {
    check_one_arg rmc_z3 "$@"
    RMC_Z3="$1"
}

rmc_other() {
    check_one_arg rmc_other "$@"
    if [ "$1" = none ]; then
        RMC_OTHER=
    else
        RMC_OTHER="$1"
    fi
}

########################################################################################################################
#                        __  __       _
#                       |  \/  | __ _(_)_ __
#                       | |\/| |/ _  | | '_ \
#                       | |  | | (_| | | | | |
#                       |_|  |_|\__,_|_|_| |_|
#
########################################################################################################################

if [ "$command" = "init" -a -x "$SPOCK_SCRIPTS/rmc-commands/init" ]; then
    $SPOCK_SCRIPTS/rmc-commands/init "$@"
    exit $?
fi

blddir=$(find_build_tree)
[ -n "$blddir" ] || die "you may need to run 'rmc init'; see 'rmc init --help'"


if [ -n "$TMPDIR" -a "$TMPDIR" != "$TEMPDIR" ]; then
    echo "$arg0: TMPDIR cannot be exported through Tup; using TEMPDIR instead." >&2
    export TEMPDIR="$TMPDIR"
fi

# Figure out what environment to use
config_sum=$(sha1sum <"$blddir/.rmc-main.cfg" |cut -d' ' -f1)
if [ "$RMC_HASH" = "" ]; then
    # We're not in an RMC environment, so we need to try to enter one
    # by reading the configuration file and seeing if we can choose
    # appropriate configurations of dependency software.
    read_config_file "$blddir/.rmc-main.cfg"

    # Convert RMC-style software dependencies to Spock-style in a temporary file
    depfile=$(tempfile)
    (
        package_spec rmc_codegen  "$RMC_CODEGEN"
        package_spec rmc_compiler "$RMC_CXX_COMPILER"
        package_spec rmc_compiler "$RMC_C_COMPILER"
        package_spec rmc_binwalk  "$RMC_BINWALK"
        package_spec rmc_bison    "$RMC_BISON"
        package_spec rmc_boost    "$RMC_BOOST"
	package_spec rmc_capstone "$RMC_CAPSTONE"
        package_spec rmc_cmake    "$RMC_CMAKE"
        package_spec rmc_cuda     "$RMC_CUDA"
        package_spec rmc_dlib     "$RMC_DLIB"
        package_spec rmc_doxygen  "$RMC_DOXYGEN"
        package_spec rmc_dwarf    "$RMC_DWARF"
        package_spec rmc_elf      "$RMC_ELF"
        package_spec rmc_gcrypt   "$RMC_GCRYPT"
        package_spec rmc_java     "$RMC_JAVA"
	package_spec rmc_jq       "$RMC_JQ"
        package_spec rmc_lcov     "$RMC_LCOV"
        package_spec rmc_libtool  "$RMC_LIBTOOL"
        package_spec rmc_magic    "$RMC_MAGIC"
        package_spec rmc_pqxx     "$RMC_PQXX"
        package_spec rmc_python   "$RMC_PYTHON"
        package_spec rmc_qt       "$RMC_QT"
        package_spec rmc_raja     "$RMC_RAJA"
        package_spec rmc_readline "$RMC_READLINE"
        package_spec rmc_spot     "$RMC_SPOT"
        package_spec rmc_sqlite   "$RMC_SQLITE"
        package_spec rmc_tup      "$RMC_TUP"
        package_spec rmc_wt       "$RMC_WT"
        package_spec rmc_yaml     "$RMC_YAML"
        package_spec rmc_yices    "$RMC_YICES"
        package_spec rmc_z3       "$RMC_Z3"
    ) |sed '/^$/d' >"$depfile"

    # DEBUGGING
    #cat $depfile; exit 1

    # The Spock --install switch doesn't quite work yet due to its build dependency resolution not being
    # implemented. Therefore, if installation is requested and packages are missing, run the rose-install-all-deps script
    # to install some of them (the problematic ones) before continuing.
    if [ -n "$do_install" -a "$do_install" != "--install=no" ]; then
        if ! "$SPOCK_BINDIR/spock-shell" --with-file "$depfile" --log none true; then
            preinstall || exit 1
        fi
    fi

    # Attempt to resolve the dependency constraints and cache the results for later.
    if ! "$SPOCK_BINDIR/spock-shell" --with-file "$depfile" --output "$blddir/.spock" \
         $do_install $do_graph --log="$do_debug" true; then
	echo "Previous errors occurred when using these dependencies:"
	sed 's/^/    /' "$depfile"
        rm -f "$depfile" "$blddir/.spock"
        exit 1
    fi
    rm -rf "$depfile"

elif [ "$RMC_HASH" != "$config_sum" ]; then
    # We must already be in a subshell, so check that the user didn't modify the config file
    die "$blddir/.rmc-main.cfg changed; you must exit this shell and rerun rmc"

elif [ "$command" = "" ]; then
    # We're already in an RMC subshell and nothing changed
    echo "$arg0: warning: you don't need RMC to create a subshell (but doing it anyway)" >&2
    exec bash

elif [ -x "$SPOCK_SCRIPTS/rmc-commands/$command" ]; then
    adjust_rose_variables
    exec "$SPOCK_SCRIPTS/rmc-commands/$command" "$@"

else
    adjust_rose_variables
    exec "$command" "$@"
fi

# Figure out what command to run (same as the last few "if" statements above, but use spock-shell to enter an environment
export RMC_HASH
adjust_rose_variables
if [ "$command" = "" ]; then
    exec "$SPOCK_BINDIR/spock-shell" --log='none,>=warn' --with-file "$blddir/.spock" --welcome
elif [ -x "$SPOCK_SCRIPTS/rmc-commands/$command" ]; then
    exec "$SPOCK_BINDIR/spock-shell" --log='none,>=warn' --with-file "$blddir/.spock" \
         "$SPOCK_SCRIPTS/rmc-commands/$command" "$@"
else
    exec "$SPOCK_BINDIR/spock-shell" --log='none,>=warn' --with-file "$blddir/.spock" "$command" "$@"
fi

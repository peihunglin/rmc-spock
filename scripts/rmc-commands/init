#!/bin/bash
# Initialize a build tree. The argument should be the ROSE source tree.
arg0="rmc ${0##*/}"
dir0="${0%/*}"

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1
source "$SPOCK_SCRIPTS/impl/spock-realpath.sh" || exit 1

# Check command-line arguments
do_batch_mode= do_force= do_help= projects=
while [ "$#" -gt 0 ]; do
    case "$1" in
        --)
            shift
            break
            ;;

        --batch)
            do_batch_mode=yes
            shift
            ;;

        -f|--force)
            do_force=yes
            shift
            ;;

        -h|--help)
            do_help=yes
            shift
            ;;

        --project=*)
            case "${1#--project=}" in
                list)
                    echo "Projects:"
                    echo "  * binaries -- binary analysis tools"
                    echo "  * estcp    -- projects/ESTCP tools"
		    echo "  * jaccel   -- jaccel servers RHEL-7 GCC-6.1.0"
                    echo "  * gpu      -- working with GPUs"
                    echo "  * matrix   -- matrix testing tools"
                    echo "  * robb     -- Robb's ROSE development config"
                    exit 0
                    ;;
                binaries|estcp|jaccel|gpu|matrix|robb)
                    projects=("${projects[@]}" "${1#--project=}")
                    ;;
                *)
                    die "'${1#--project=}' is not a valid project; see --project=list"
                    ;;
            esac
            shift
            ;;

        -*)
            die "unknown switch: $1; see '$arg0 --help'"
            ;;
        *)
            break
            ;;
    esac
done

if [ -n "$do_help" -o "$1" = "help" ]; then
    echo "usage: $arg0 [SWITCHES] PATH_TO_ROSE_SOURCE_TREE"
    echo "   Initializes the CWD to be a ROSE build tree by creating a default .rmc-main.cfg file,"
    echo "   then plop the user into an editor to make adjustments (unless --batch)."
    echo "     -b, --batch"
    echo "       Don't do anything that requires user interaction, such as invoking the editor."
    echo "       Use environment variables to override RMC settings. For instance, COMPILER overrides"
    echo "       the rmc_compiler setting, LANGUAGES overrides the rmc_languages setting, etc.  The"
    echo "       defaults should already be sane, and the user is plopped into an editor anyway, so"
    echo "       these overrides are mostly for batch mode when this script is called from other scripts."
    echo "     -f, --force"
    echo "       Force creation of a new .rmc-main.cfg file even if the current working directory is"
    echo "       not empty or it already contains a .rmc-main.cfg file."
    echo "     --project=PROJ"
    echo "       Initialize the configuration appropriate for the specified project. Use --project=list"
    echo "       to get a list of defined projects."
    exit 0
fi

if [ "$#" -ne 1 ]; then
    echo "usage: $arg0 \$PATH_TO_ROSE_SOURCE_TREE" >&2
    echo "also try: $arg0 --help" >&2
    exit 1
fi


# Sanity checks
rose_srcdir=$(spock-realpath "$1")
[ -d "$rose_srcdir/." ] ||
    die "not a directory: $rose_srcdir"
[ -e "$rose_srcdir/src/frontend/BinaryFormats/ElfSection.C" ] ||
    die "not a ROSE source tree: $rose_srcdir"
[ -e ".rmc-main.cfg" -a "$do_force" = "" ] &&
    die "this build tree is already initialized"
[ "$(ls)" = "" -o -n "$do_force" ] ||
    die "the CWD must be a new (empty) build tree"

# Name of this operating system distribution
OS_NAME=$($SPOCK_SCRIPTS/spock-os-name --file |tr A-Z a-z)

#------------------------------------------------------------------------------------------------------------------------
# Default versions, often based on operating system distribution.
#------------------------------------------------------------------------------------------------------------------------

# Use whatever compiler is already installed
default_compiler() {
    cxx_quad=$($SPOCK_SCRIPTS/impl/detect-compiler-characteristics --quad --baselang=c++ c++)
    cxx_vendor=$(echo $cxx_quad |cut -d: -f1)
    cxx_lang=$(echo $cxx_quad |cut -d: -f3)
    cxx_version=$(echo $cxx_quad |cut -d: -f4)
    echo "${cxx_vendor}-${cxx_lang}-${cxx_version}"
}

default_cmake() {
    case "$OS_NAME" in
        centos_linux_6|centos_linux_7)
            # the system-installed cmake on CentOS-6 and CentOS-7 is too old
            echo 3.13
            ;;
        *)
            echo system
            ;;
    esac
}

default_doxygen() {
    case "$OS_NAME" in
        centos_linux_6|centos_linux_7)
            # doxygen is missing libxapian-dev, which seems to be unavailable on these systems
            echo none
            ;;
        *)
            echo ambivalent
            ;;
    esac
}

default_gcrypt() {
    case "$OS_NAME" in
        centos_linux_6|centos_linux_7)
            echo 1.7
            ;;
        *)
            echo 1.8
            ;;
    esac
}

default_jq() {
    case "$OS_NAME" in
        centos_linux_6|centos_linux_7)
            # Modern versions of Jq no longer compile with the old compilers on this OS
            echo 1.3
            ;;
        *)
            echo 1
            ;;
    esac
}

#------------------------------------------------------------------------------------------------------------------------
# Settings per --project=X
#------------------------------------------------------------------------------------------------------------------------

# Defaults if no --project (or --project=none) was specified
project_none() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_rosesrc)       spock-realpath "$rose_srcdir" ;;
        rmc_install)       echo yes                   ;;
        rmc_build)         echo autoconf              ;;
        rmc_parallelism)   echo system                ;;
        rmc_codegen)       echo default               ;;
        rmc_compiler)      default_compiler           ;;
        rmc_debug)         echo yes                   ;;
        rmc_optimize)      echo ambivalent            ;;
        rmc_warnings)      echo yes                   ;;
        rmc_assertions)    echo disabled-abort        ;;
        rmc_languages)     echo all                   ;;
        rmc_binwalk)       echo none                  ;;
        rmc_bison)         echo 3                     ;;
        rmc_boost)         echo 1                     ;;
        rmc_capstone)      echo none                  ;;
        rmc_cmake)         default_cmake              ;;
        rmc_cuda)          echo none                  ;;
        rmc_dlib)          echo none                  ;;
        rmc_doxygen)       default_doxygen            ;;
        rmc_dwarf)         echo none                  ;;
        rmc_edg)           echo ambivalent            ;;
        rmc_edg_compile)   echo ambivalent            ;;
        rmc_elf)           echo none                  ;;
        rmc_gcrypt)        echo none                  ;;
        rmc_java)          echo none                  ;;
        rmc_jq)            default_jq                 ;;
        rmc_lcov)          echo none                  ;;
        rmc_libtool)       echo ambivalent            ;;
        rmc_magic)         echo none                  ;;
        rmc_pqxx)          echo none                  ;;
        rmc_python)        echo none                  ;;
        rmc_qt)            echo none                  ;;
        rmc_raja)          echo none                  ;;
        rmc_readline)      echo none                  ;;
        rmc_spot)          echo none                  ;;
        rmc_sqlite)        echo none                  ;;
        rmc_tup)           echo ambivalent            ;;
        rmc_wt)            echo none                  ;;
        rmc_yaml)          echo none                  ;;
        rmc_yices)         echo none                  ;;
        rmc_z3)            echo none                  ;;
    esac
}

# Defaults for --project=estcp (only those that differ from --project=none)
project_estcp() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_languages)     echo binaries              ;;
        rmc_binwalk)       echo 2                     ;;
        rmc_dlib)          echo 18.17                 ;;
        rmc_gcrypt)        default_gcrypt             ;;
        rmc_jq)            default_jq                 ;;
        rmc_qt)            echo 5                     ;;
        rmc_yaml)          echo 0.6.2                 ;;
        rmc_z3)            echo 4.8.12                ;;
    esac
}

# Defaults for --project=matrix (matrix testing tools)
project_matrix() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_languages)     echo none                  ;;
        rmc_pqxx)          echo 7                     ;;
	rmc_jq)            echo none                  ;;
        #rmc_wt)            echo 3.3.7                 ;;
        #rmc_yaml)          echo 0.6.2                 ;;
    esac
}

# Defaults for binary analysis. These are intentionally a bit more conversative than what Robb uses for
# cutting edge development.
project_binaries() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_capstone)      echo 4.0.2                 ;;
        rmc_languages)     echo binaries              ;;
        rmc_binwalk)       echo 2                     ;;
        rmc_dlib)          echo 18.17                 ;;
        rmc_jq)            echo 1.5                   ;;
        rmc_pqxx)          echo 5                     ;;
        rmc_sqlite)        echo 3                     ;;
        rmc_yaml)          echo 0.6.2                 ;;
        rmc_z3)            echo 4.8.12                ;;
    esac
}

# Defaults for Jaccel servers running RHEL-7 using GCC-6.1.0
project_jaccel() {
    local rmc_commands="$1"
    case "$rmc_command" in
	rmc_cmake)         echo 3.13.2                ;;
	rmc_compiler)      echo gnu-c++11-6.1.0       ;;
	rmc_jq)            echo none                  ;;
	rmc_optimize)      echo yes                   ;;
	rmc_languages)     echo binaries              ;;
	rmc_boost)         echo 1.73                  ;;
	rmc_dlib)          echo 18.17                 ;;
	rmc_yaml)          echo 0.6.3                 ;;
	rmc_z3)            echo 4.8.12                ;;
    esac
}

# Defaults for Robb's development environment. Note that whenever only part of a version number is specified that
# RMC/Spock will choose either the latest installed version or will install the latest available version. But note
# that a non-dotted version number cannot be "0".
project_robb() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_languages)     echo binaries              ;;
        rmc_compiler)      echo llvm-gnu++14-10.0.0   ;;
        rmc_optimize)      echo yes                   ;;
        rmc_build)         echo tup                   ;;
        rmc_binwalk)       echo 2                     ;;
        rmc_boost)         echo 1                     ;;
        rmc_capstone)      echo 4.0.2                 ;;
        rmc_dlib)          echo 19                    ;;
        rmc_jq)            echo 1                     ;;
        rmc_magic)         echo 5                     ;;
        rmc_pqxx)          echo 6                     ;;
        rmc_qt)            echo 5                     ;;
        rmc_sqlite)        echo 3                     ;;
        rmc_tup)           echo 0.7.8                 ;;
        rmc_yaml)          echo 0.6                   ;;
        rmc_z3)            echo 4.8.12                ;;
    esac
}

# Defaults for supporting GPUs
project_gpu() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_languages)     echo "c,c++"               ;;
        rmc_cuda)          echo "nvidia-cuda-8"       ;;
        rmc_raja)          echo "0.4"                 ;;
    esac
}

# Defaults from the environment variables
project_envars() {
    local rmc_command="$1"
    case "$rmc_command" in
        rmc_install)       	 echo "$INSTALL"             ;;
        rmc_build)         	 echo "$BUILD"               ;;
        rmc_parallelism)   	 echo "$PARALLELISM"         ;;
        rmc_codegen)       	 echo "$CODEGEN"             ;;
        rmc_compiler)      	 echo "$COMPILER"            ;;
        rmc_debug)         	 echo "$DEBUG"               ;;
        rmc_optimize)      	 echo "$OPTIMIZE"            ;;
        rmc_warnings)      	 echo "$WARNINGS"            ;;
	rmc_optional_assertions) echo "$OPTIONAL_ASSERTIONS" ;;
	rmc_assertion_behavior)  echo "$ASSERTION_BEHAVIOR"  ;;
        rmc_languages)     	 echo "$LANGUAGES"           ;;
        rmc_binwalk)       	 echo "$BINWALK"             ;;
        rmc_bison)         	 echo "$BISON"               ;;
        rmc_boost)         	 echo "$BOOST"               ;;
        rmc_capstone)      	 echo "$CAPSTONE"            ;;
        rmc_cmake)         	 echo "$CMAKE"               ;;
        rmc_cuda)          	 echo "$CUDA"                ;;
        rmc_dlib)          	 echo "$DLIB"                ;;
        rmc_doxygen)       	 echo "$DOXYGEN"             ;;
        rmc_dwarf)         	 echo "$DWARF"               ;;
        rmc_edg)           	 echo "$EDG"                 ;;
        rmc_edg_compile)   	 echo "$EDG_COMPILE"         ;;
        rmc_elf)           	 echo "$ELF"                 ;;
        rmc_gcrypt)        	 echo "$GCRYPT"              ;;
        rmc_java)          	 echo "$JAVA"                ;;
        rmc_jq)            	 echo "$JQ"                  ;;
        rmc_lcov)          	 echo "$LCOV"                ;;
        rmc_libtool)       	 echo "$LIBTOOL"             ;;
        rmc_magic)         	 echo "$MAGIC"               ;;
        rmc_pqxx)          	 echo "$PQXX"                ;;
        rmc_python)        	 echo "$PYTHON"              ;;
        rmc_qt)            	 echo "$QT"                  ;;
        rmc_raja)          	 echo "$RAJA"                ;;
        rmc_readline)      	 echo "$READLINE"            ;;
        rmc_spot)          	 echo "$SPOT"                ;;
        rmc_sqlite)        	 echo "$SQLITE"              ;;
        rmc_tup)           	 echo "$TUP"                 ;;
        rmc_wt)            	 echo "$WT"                  ;;
        rmc_yaml)          	 echo "$YAML"                ;;
        rmc_yices)         	 echo "$YICES"               ;;
        rmc_z3)            	 echo "$Z3"                  ;;
    esac
}

config_property() {
    local rmc_command="$1" comment="$2"
    [ -n "$comment" ] && comment="# $comment"

    local value=
    for project in envars ${projects[*]} none; do
        value=$(eval "project_$project $rmc_command")
        [ -n "$value" ] && break
    done

    printf '%-23s %-23s %s\n' "$rmc_command" "$value" "$comment"
}

#------------------------------------------------------------------------------------------------------------------------

# Create a default .rmc-main.cfg
(
    echo "# RMC configuration file -*- shell-script -*-"
    echo
    echo "# Edit this file to change how your build environment will"
    echo "# be configured.  Each time you change this file you should"
    echo "# exit and re-enter the build environment, and possibly rerun"
    echo "# ROSE's configure script (\"rmc config\"), and clean your"
    echo "# build tree (\"make clean\"). Failure to do this may result"
    echo "# in build artifacts compiled in incompatible ways leading to"
    echo "# failures such as segmentation faults."
    echo "#"
    echo "# Note that as of Feb 2017, the new RMC-2 does not yet"
    echo "# support every possible configuration.  For the time being,"
    echo "# you may need to add some software dependencies manually in"
    echo "# order to use them."
    echo
    echo "# All of these settings are fully documented in ROSE's internal"
    echo "# confluence pages. Find them using the search feature."
    echo
    echo "# Basic settings"
    config_property rmc_rosesrc
    config_property rmc_install       "where to install ROSE ('yes' means default location)"
    config_property rmc_build         "build system: 'autoconf', 'cmake', or 'tup'"
    config_property rmc_parallelism   "number or 'system'"
    echo
    echo "# Compiler settings"
    config_property rmc_codegen       "default|m32"
    config_property rmc_compiler      "('gnu'|'llvm'|'intel')-language-version"
    config_property rmc_debug         "debug support: 'yes' or 'no'"
    config_property rmc_optimize      "optimizations: 'yes', 'no', or 'ambivalent'"
    config_property rmc_warnings      "compiler warnings: 'yes' or 'no'"
    echo
    echo "# Configuration options"
    config_property rmc_assertions    "optional assertions (enabled,disabled), and behavior (abort,throw,exit)"
    config_property rmc_languages     "ROSE frontend languages, comma-separated"
    echo
    echo "# Software dependencies"
    config_property rmc_binwalk       "Binwalk firmware extraction tool (optional)"
    config_property rmc_bison         "Bison version number (optional) [NOTE 2]"
    config_property rmc_boost         "Boost version number (required)"
    config_property rmc_capstone      "Capstone disassembler (optional)"
    config_property rmc_cmake         "CMake version number (optional) [NOTE 1]"
    config_property rmc_cuda          "CUDA compiler version (optional)"
    config_property rmc_dlib          "DLib version number (optional)"
    config_property rmc_doxygen       "Doxygen version number (optional)"
    config_property rmc_dwarf         "DWARF library version number (optional)"
    config_property rmc_edg           "EDG version number (optional)"
    config_property rmc_edg_compile   "Compile EDG source code (optional)"
    config_property rmc_elf           "ELF library version number (needed by dwarf)"
    config_property rmc_gcrypt        "GNU gcrypt library version number (optional)"
    config_property rmc_java          "Oracle JDK version number (optional)"
    config_property rmc_jq            "Command-line JSON parser (optional)"
    config_property rmc_lcov          "Lcov version, and turns on coverage analysis (optional)"
    config_property rmc_libtool       "GNU libtool version number (optional)"
    config_property rmc_magic         "libmagic version number (optional)"
    config_property rmc_pqxx          "PostgreSQL C++ library (optional)"
    config_property rmc_python        "Python version number (optional)"
    config_property rmc_qt            "Qt version number (optional)"
    config_property rmc_raja          "performance portability layer (optional)"
    config_property rmc_readline      "libreadline version number (optional)"
    config_property rmc_spot          "Spot library version number (optional)"
    config_property rmc_sqlite        "SQLite version number (optional)"
    config_property rmc_tup           "Tup version used if rmc_build is 'tup'"
    config_property rmc_wt            "Wt version number (optional)"
    config_property rmc_yaml          "Yaml-cpp version number (optional)"
    config_property rmc_yices         "Yices version number (optional)"
    config_property rmc_z3            "Z3 SMT solver version number (optional)"
    echo
    echo '# NOTE-1: CMake versions 3.11.0 and later (up to and including at least 3.13.2) cannot'
    echo '#         be compiled with a C++11 compiler because they they get a compiler error in'
    echo '#         Source/cmAlgorithms.h: no member named "size" in namespace "std"'
    echo
    echo '# NOTE-2: Bison 3.1 and later (up to and including at least 3.2.2) cannot be compiled'
    echo '#         with Intel C++ version 14.'
) >.rmc-main.cfg

if [ "$do_batch_mode" = "" ]; then
    ${EDITOR:-vi} .rmc-main.cfg
    echo "Now run $SPOCK_BINDIR/rmc to enter the build subshell"
fi
exit 0
